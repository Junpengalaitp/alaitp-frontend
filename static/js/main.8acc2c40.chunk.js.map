{"version":3,"sources":["components/UI/Input/Input.js","shared/utility.js","components/UI/Button.js","components/Search/SearchForm.js","store/actions/actionTypes.js","store/actions/jobSearch.js","components/Search/SearchBar.js","components/JobDescription/JobDescriptionText.js","components/JobDescription/JobDescription.js","components/UI/Spinner/Spinner.js","store/actions/keywordSearch.js","components/JobDescription/JobDescriptionList.js","store/actions/coOccurrence.js","components/Keywords/CoOccurredWord/CoOccurredWords.js","components/Keywords/KeywordList/KeywordListItem.js","components/Keywords/KeywordList/KeywordList.js","components/Keywords/KeywordList/KeywordListGroup.js","components/Search/SearchResults.js","components/UI/NavigationBar.js","containers/Layout/Layout.js","App.js","serviceWorker.js","store/reducers/keywordSearch.js","store/reducers/jobSearch.js","store/reducers/coOccurrence.js","index.js","components/UI/Input/Input.module.css","components/UI/Spinner/Spinner.module.css"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","elementConfig","value","onChange","changed","options","map","option","key","displayValue","updateObject","oldObject","updatedProperties","Button","onClick","clicked","disabled","children","connect","dispatch","onJobSearchStart","type","onJobSearchSuccess","searchInput","requestId","require","uuidv4","console","log","Axios","get","then","response","jobMap","data","jobSearchId","catch","error","searchJobs","useState","placeholder","validation","required","valid","searchForm","setSearchForm","inputChangedHandler","event","updatedSearchForm","target","handleSubmit","preventDefault","history","onSearchBar","Form","onSubmit","Row","Col","xs","inputCSS","buttonCSS","onNavBar","inline","FormControl","show","SearchBar","Container","xl","lg","md","path","exact","render","React","Component","state","keywordSearchComplete","keyword","searchComplete","keywordIndex","keywordIndexByJob","jobDescriptionText","opened","Fragment","keywordList","jobId","keywordIndices","keywordObj","startIdx","endIdx","category","sort","a","b","undefined","jobTextWithKeywordsArray","substring","categoryColorMap","i","length","badgeColor","keywordBadge","OverlayTrigger","placement","overlay","Tooltip","id","Badge","variant","textBetweenBadges","JobDescription","open","setOpen","setOpened","Card","style","width","Body","Title","title","company","Subtitle","aria-controls","aria-expanded","tags","Collapse","in","Spinner","Loader","setKeywords","keywords","JobDescriptionList","searchResult","this","loading","onKeywordSearchStart","cacheError","onJobCacheFail","Object","keys","jobTitle","jobDescription","desc","post","setCoCoOccurredWords","coOccurredWords","words","CustomToggle","forwardRef","ref","e","CustomMenu","labeledBy","categories","setCategories","categoryMap","pl","ol","lb","fw","cs","ai","pt","ds","dt","dv","ps","we","os_","sv","ap","se","pf","ge","sf","tl","at","pd","ql","of","tm","cp","aria-labelledby","Check","label","handleOnClick","Children","toArray","filter","child","toLowerCase","startsWith","orderedKeywordByCategory","coOccurrence","onCoOccurrenceSearchStart","onCoOccurrenceSearchSuccess","word","count","replace","searchCoCoOccurrence","keywordInCategory","keywordType","coOccurredWordDropdown","wordByCategory","coOccurredWordList","index","Dropdown","Item","eventKey","entries","slice","ListGroup","action","getCoOccurredWordsByCategory","Toggle","as","Menu","KeywordList","sm","horizontal","href","keywordListCSS","categoryTitle","jobDescriptionLoading","keywordsLoading","KeywordListRows","SearchResult","NavBar","Navbar","sticky","bg","expand","Brand","Nav","Link","component","SearchResults","App","Boolean","window","location","hostname","match","initialState","payload","allKeywordsByCategory","programmingLanguage","PROGRAMMING_LANGUAGE","otherLanguage","OTHER_LANGUAGE","library","LIBRARY","framework","FRAMEWORK","division","DIVISION","position","POSITION","dataStorage","DATA_STORAGE","dataTransmission","DATA_TRANSMISSION","server","SERVER","platform","PLATFORM","approach","APPROACH","softwareEngineering","SOFTWARE_ENGINEERING","computerScience","COMPUTER_SCIENCE","AI","os","OS","architect","ARCHITECT","quality","QUALITY","protocol","PROTOCOL","tool","TOOL","softwareProduct","SOFTWARE_PRODUCT","workExperience","WORK_EXPERIENCE","softSkill","SOFT_SKILL","offer","OFFER","team","TEAM","COMPANY","reducer","setJobMap","updateCoCoOccurredWords","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","keywordReducer","jobReducer","coOccurrenceReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8acc2c40.chunk.js","sourcesContent":["import React from 'react'\nimport classes from './Input.module.css'\n\nconst Input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement]\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input \n                className={props.className}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                    />\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={classes.InputElement}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n                    />\n            break;\n        case ('select'):\n            inputElement = <select \n                className={classes.InputElement}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\n                ))}\n            </select>\n            break;\n        default:\n            inputElement = <input className={classes.InputElement} {...props.elementConfig} value={props.value} />\n    }\n\n\n    return (\n        <div>\n            {inputElement}\n        </div>\n    )\n}\n\nexport default Input\n","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    }\n}\n\nexport const checkValidity = ( value, rules ) => {\n    let isValid = true\n    if (!rules) {\n        return true;\n    }\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid\n    }\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid\n    }\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid\n    } \n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid\n    }\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid\n    }\n    return isValid\n}","import React from 'react'\n\nconst Button = (props) => (\n  <button \n    className={props.className}\n    onClick={props.clicked}\n    disabled={props.disabled}\n    >\n    {props.children}\n  </button>\n)\n\nexport default Button;","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Input from \"../UI/Input/Input\";\nimport { updateObject } from \"../../shared/utility\";\n\nimport * as actionTypes from \"../../store/actions/actionTypes\";\nimport Button from \"../UI/Button\";\nimport { searchJobs } from \"../../store/actions/jobSearch\";\nimport { Form, FormControl } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\n\nconst SearchForm = props => {\n  const [searchForm, setSearchForm] = useState({\n    elementType: \"input\",\n    elementConfig: {\n      type: \"text\",\n      placeholder: \"Software Engineer\"\n    },\n    value: \"\",\n    validation: {\n      required: true\n    },\n    valid: true,\n    touched: false\n  });\n\n  const inputChangedHandler = event => {\n    const updatedSearchForm = updateObject(searchForm, {\n      value: event.target.value,\n      touched: true\n    });\n    setSearchForm(updatedSearchForm)\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    props.onJobSearchStart()\n    props.history.push(`/alaitp-frontend/keywords/${searchForm.value}`)\n    props.onJobSearchSuccess(searchForm.value)\n  }\n\n  const onSearchBar = (\n    <Form onSubmit={handleSubmit}>\n      <Row>\n        <Col xs={9}>\n          <Input\n            className={props.inputCSS}\n            elementType={searchForm.elementType}\n            elementConfig={searchForm.elementConfig}\n            value={searchForm.value}\n            invalid={!searchForm.valid}\n            shouldValidate={searchForm.validation}\n            touched={searchForm.touched}\n            changed={event => inputChangedHandler(event)}\n          />\n        </Col>\n        <Col xs={3}>\n          <Button type=\"submit\" className={props.buttonCSS}>\n            Search\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n    )\n\n  const onNavBar = (\n    <Form onSubmit={handleSubmit} inline>\n      <FormControl\n        className={props.inputCSS}\n        type={searchForm.elementConfig.type}\n        value={searchForm.value}\n        onChange={event => inputChangedHandler(event)}\n        placeholder={searchForm.elementConfig.placeholder}\n      />\n      <Button type=\"submit\" className={props.buttonCSS}>\n        Search\n      </Button>\n    </Form>\n  )\n\n  return props.show ? onNavBar: onSearchBar\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onJobSearchStart: () => dispatch({ type: actionTypes.JOB_SEARCH_START }),\n    onJobSearchSuccess: searchInput => dispatch(searchJobs(searchInput))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SearchForm);\n","export const KEYWORD_SEARCH_START = 'KEYWORD_SEARCH_START'\nexport const KEYWORD_SEARCH_SUCCESS = 'KEYWORD_SEARCH_SUCCESS'\nexport const KEYWORD_SEARCH_FAIL = 'KEYWORD_SEARCH_FAIL'\n\nexport const JOB_SEARCH_START = 'JOB_SEARCH_START'\nexport const JOB_SEARCH_CACHE_FAIL = 'JOB_SEARCH_CACHE_FAIL'\nexport const JOB_SEARCH_SUCCESS = 'JOB_SEARCH_SUCCESS'\nexport const JOB_SEARCH_FAIL = 'JOB_SEARCH_FAIL'\n\nexport const COOCCURRENCE_SEARCH_START = 'COOCCURRENCE_SEARCH_START'\nexport const COOCCURRENCE_SEARCH_SUCCESS = 'COOCCURRENCE_SEARCH_SUCCESS'\nexport const COOCCURRENCE_SEARCH_FAIL = 'COOCCURRENCE_SEARCH_FAIL'","import Axios from \"axios\";\n\nimport * as actionTypes from './actionTypes'\n\nexport const setJobs = (jobMap, jobSearchId) => {\n  return {\n    type: actionTypes.JOB_SEARCH_SUCCESS,\n    jobMap: jobMap,\n    jobSearchId: jobSearchId,\n  };\n};\n\nexport const searchJobs = searchInput => {\n  if (searchInput === '') searchInput = 'Software Engineer'\n  return dispatch => {\n    const uuidv4 = require('uuid/v4')\n    const requestId = uuidv4()\n    console.log(\"requestId: \" + requestId)\n    Axios.get(`http://2r98a43392.qicp.vip/job-description-api/job-list/${searchInput}/${requestId}`)\n      .then(response => {\n        dispatch(setJobs(response.data, requestId))\n      })\n      .catch(error => {\n        console.log('error happened during searching keywords' + error)\n      })\n  };\n};","import React from \"react\";\nimport { Route } from 'react-router'\nimport SearchForm from \"./SearchForm\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass SearchBar extends React.Component {\n\n  render() {\n    return (\n      <Container className=\"mt-5\">\n        <Row className=\"mt-5\">\n          <Col xl={9} className=\"mx-auto\" >\n            <h1 className=\"mt-5\">Search For Most Wanted Technical Skills!</h1>\n          </Col>\n          <Col xl={7} lg={8} md={10} className=\"mx-auto mt-5\" >\n            <Route path='/alaitp-frontend' exact render={(props) => <SearchForm {...props} inputCSS=\"form-control form-control-lg\" buttonCSS=\"btn btn-outline-primary btn-lg\" show={false} />} />\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n\n}\n\nexport default SearchBar\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Badge, OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nconst JobDescriptionText = props => {\n  let jobDescriptionText = props.jobDescriptionText;\n  if (props.keywordSearchComplete) {\n    if (!props.opened) { // do not render keywords if the text hasn't been opened\n      return <React.Fragment>{jobDescriptionText}</React.Fragment>\n    }\n    const jobId = props.jobId\n    const keywordIndices = [];\n    let keywordList\n    try {\n      keywordList = props.keywordIndex[jobId]\n      for (const keywordObj of keywordList) {\n        keywordIndices.push([keywordObj.startIdx, keywordObj.endIdx, keywordObj.keyword, keywordObj.category])\n      }\n    } catch (error) {\n      console.log(\"error, job id: \", jobId, \"keyword list: \", keywordList, error)\n      return <React.Fragment>{jobDescriptionText}</React.Fragment>\n    }\n    \n    // sort the keyword indices so it can break and combine job text with keywords in order\n    keywordIndices.sort((a, b) => a[0] - b[0]);\n\n    if (keywordIndices[0] === null || keywordIndices[0] === undefined) // no keywords\n      return <React.Fragment>{jobDescriptionText}</React.Fragment>;\n    \n      // init with the start to first keyword\n    let jobTextWithKeywordsArray = [props.jobDescriptionText.substring(0, keywordIndices[0][0])]\n    const categoryColorMap = {\n      \"PROGRAMMING_LANGUAGE\": \"primary\",\n      \"OTHER_LANGUAGE\": \"primary\",\n      \"LIBRARY\": \"info\",\n      \"FRAMEWORK\": \"info\",\n      \"DATA_STORAGE\": \"warning\",\n      \"DATA_TRANSMISSION\": \"warning\",\n      \"PLATFORM\": \"success\",\n      \"SERVER\": \"success\",\n      \"OS\": \"success\",\n      \"APPROACH\": \"secondary\",\n      \"SOFTWARE_ENGINEERING\": \"secondary\",\n      \"POSITION\": \"danger\",\n      \"DIVISION\": \"danger\",\n      \"WORK_EXPERIENCE\": \"danger\"\n    }\n    for (let i = 0; i < keywordIndices.length - 1; i++) {\n      if (keywordIndices[i][3] !== null) {\n        \n        let badgeColor = categoryColorMap[keywordIndices[i][3]]\n        if (badgeColor === undefined) {\n          badgeColor = \"dark\"\n        }\n        const keywordBadge = (\n          <OverlayTrigger\n            key={keywordIndices[i][0]}\n            placement={\"top\"}\n            overlay={\n              <Tooltip id={'tooltip-top'}>\n                <strong>{keywordIndices[i][3]}</strong>.\n              </Tooltip>\n            }\n          >\n            <Badge variant={badgeColor} key={keywordIndices[i][0]}>\n              {props.jobDescriptionText.substring(\n                keywordIndices[i][0],\n                keywordIndices[i][1]\n              )}\n            </Badge>\n          </OverlayTrigger>\n          \n        );\n        const textBetweenBadges = props.jobDescriptionText.substring(\n          keywordIndices[i][1],\n          keywordIndices[i + 1][0]\n        );\n        jobTextWithKeywordsArray.push(keywordBadge);\n        jobTextWithKeywordsArray.push(textBetweenBadges);\n      }\n    }\n    // add text after the last\n    jobTextWithKeywordsArray.push(\n      props.jobDescriptionText.substring(\n        keywordIndices[keywordIndices.length - 1][0]\n      )\n    );\n    jobDescriptionText = <p>{jobTextWithKeywordsArray}</p>;\n  }\n  return <React.Fragment>{jobDescriptionText}</React.Fragment>\n}\n\nconst mapStateToProps = state => {\n  return {\n    keywordSearchComplete: state.keyword.searchComplete,\n    keywordIndex: state.keyword.keywordIndexByJob\n  };\n};\n\nexport default connect(mapStateToProps)(JobDescriptionText);\n","import React, { useState } from 'react';\nimport { Button, Collapse, Card } from 'react-bootstrap';\nimport JobDescriptionText from './JobDescriptionText';\n\nconst JobDescription = props => {\n  const [open, setOpen] = useState(false)\n  const [opened, setOpened] = useState(false)\n\n  const handleOpen = () => {\n    setOpen(!open)\n    setOpened(true) // for rendering the keywords\n  }\n\n  return (\n    <Card style={{ width: '49rem' }}>\n      <Card.Body>\n        <Card.Title className=\"clearfix\">\n          <p className=\"card-title float-left\"><strong>{props.title}</strong></p>\n          <p className=\"card-text float-right\">{props.company}</p>\n        </Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted clearfix\">\n          <Button\n            className=\"card-title float-left\"\n            variant=\"outline-info btn-sm\"\n            onClick={() => handleOpen()}\n            aria-controls=\"job-collapse-text\"\n            aria-expanded={open}\n          >See Job Text</Button>\n          <p className=\"card-text float-right\">{props.tags}</p>\n        </Card.Subtitle>\n        <Collapse in={open}>\n          <div id=\"job-collapse-text mx-1\">\n            <JobDescriptionText jobDescriptionText={props.jobDescriptionText} jobId={props.jobId} opened={opened}></JobDescriptionText>\n          </div>\n        </Collapse>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default JobDescription","import React from 'react'\nimport classes from './Spinner.module.css';\n\nconst Spinner = () => {\n  return (\n    <div className={classes.Loader}>\n    </div>\n  )\n}\n\nexport default Spinner\n","import Axios from \"axios\"\n\nimport * as actionTypes from './actionTypes'\n\nexport const setKeywords = keywords => {\n  return {\n    type: actionTypes.KEYWORD_SEARCH_SUCCESS,\n    keywords: keywords\n  }\n}\n\nexport const setKeywordOnCacheFail = () => {\n  return {\n    type: actionTypes.JOB_SEARCH_CACHE_FAIL,\n  }\n}\n\n\n/**\n * job descriptions are cache in redis by requestId after job search success,\n * send the requestId to job-keyword project\n * @param {string} requestId \n */\nexport const getJobKeyword = requestId => {\n  return dispatch => {\n    Axios.get(`http://2r98a43392.qicp.vip/job-keyword/keywords/${requestId}`)\n      .then(response => {\n        console.log(\"getJobKeyword response\", response)\n        if (response.data.error === true) {\n          console.log(\"requestId cache failed, tring to post jobs\", response)\n          dispatch(setKeywordOnCacheFail())\n        } else {\n          dispatch(setKeywords(response.data))\n        }\n      })\n      .catch(error => {\n        console.log(`error happened during searching keywords, request id: ${requestId}`, error)\n      })\n  }\n}\n\n/**\n * Post all jobDescription to backend to get job keywords,\n * backup plan if get keywords by requestId fails\n * @param {object} jobDescription \n */\nexport const postJobKeyword = jobDescription => {\n  if (jobDescription === '' || jobDescription === undefined) jobDescription = {desc: 'description'}\n  return dispatch => {\n    Axios.post(`http://2r98a43392.qicp.vip/job-keyword/keywords`, jobDescription)\n      .then(response => {\n        console.log(\"postJobKeyword response\", response)\n        dispatch(setKeywords(response.data))\n      })\n      .catch(error => {\n        console.log('error happened during searching keywords' + error)\n      })\n  }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport JobDescription from \"./JobDescription\";\nimport Spinner from \"./../UI/Spinner/Spinner\";\n\nimport * as actionTypes from \"../../store/actions/actionTypes\"\nimport { getJobKeyword, postJobKeyword } from \"../../store/actions/keywordSearch\";\n\nclass JobDescriptionList extends React.Component {\n\n  render() {\n    let searchResult = <Spinner />;\n    if (!this.props.loading) {\n\n      this.props.onKeywordSearchStart()\n      this.props.onJobSearchSuccess(this.props.jobSearchId)\n\n      if (this.props.cacheError === true) {\n        this.props.onJobCacheFail(this.props.jobMap)\n      }\n\n      searchResult = Object.keys(this.props.jobMap)\n        .map((jobId) => (\n          <JobDescription\n            jobId={jobId}\n            key={jobId}\n            title={this.props.jobMap[jobId].jobTitle}\n            company={this.props.jobMap[jobId].company}\n            tags={this.props.jobMap[jobId].tags}\n            jobDescriptionText={this.props.jobMap[jobId].jobDescriptionText}\n          />\n        ));\n    }\n\n    return <React.Fragment>{searchResult}</React.Fragment>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    jobSearchId: state.jobDescription.jobSearchId,\n    jobMap: state.jobDescription.jobMap,\n    loading: state.jobDescription.loading,\n    cacheError: state.keyword.cacheError\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onKeywordSearchStart: () => dispatch({ type: actionTypes.KEYWORD_SEARCH_START }),\n    onJobSearchSuccess: jobSearchId => dispatch(getJobKeyword(jobSearchId)),\n    onJobCacheFail: jobMap => dispatch(postJobKeyword(jobMap)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobDescriptionList);\n","import Axios from 'axios'\n\nimport * as actionTypes from './actionTypes'\n\nexport const setCoCoOccurredWords = coOccurredWords => {\n  return {\n    type: actionTypes.COOCCURRENCE_SEARCH_SUCCESS,\n    coOccurredWords: coOccurredWords.words,\n  }\n}\n\nexport const searchCoCoOccurrence = (word, categories='all', count=20) => {\n  word = word.replace('#', '%23')\n  return dispatch => {\n    console.log(`get ${count} co-occurred words for word: ${word} in categories: ${categories}`)\n    Axios.get(`http://2r98a43392.qicp.vip/co_occurrence_matrix/most-correlated-words/${word}/${count}/${categories}`)\n      .then(response => {\n        console.log(response.data)\n        dispatch(setCoCoOccurredWords(response.data))\n      })\n      .catch(error => {\n        console.log('error happened during searching keywords' + error)\n      })\n  }\n}","import React from \"react\";\nimport { useState } from \"react\";\nimport { FormControl, Form } from \"react-bootstrap\";\n\nexport const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n  \n  <p ref={ref} onClick={e => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n  </p>\n));\n\n// forwardRef again here!\n// Dropdown needs access to the DOM of the Menu to measure it\nexport const CustomMenu = React.forwardRef(\n  ({ children, style, className, \"aria-labelledby\": labeledBy }, ref) => {\n    const [value, setValue] = useState(\"\");\n    const [categories, setCategories] = useState([]);\n    const type = \"radio\"\n    const categoryList = ['pl', 'ol', 'lb', 'fw', 'cs', 'ai', 'pt', 'ds', 'dt', 'dv', 'ps', 'we', 'os', 'sv', 'ap', 'se', 'pf', 'ge', 'sf', 'tl', 'at', 'pd', 'ql', 'of', 'tm', 'cp']\n    const categoryMap = {pl: \"programming language\", ol: \"other language\", lb: \"library\", fw: \"framework\", cs: \"computer science\", ai: \"artificial intelligence\", pt: \"protocol\",\n                          ds: \"data storage\", dt: \"data transmission\", dv: \"division\", ps: \"position\", we: \"work experience\", os_: \"operating system\", sv: \"server\", ap: \"approach\", \n                          se: \"software engineering\", pf: \"platform\", ge: \"general\", sf: \"soft skills\", tl: \"tool\", at: \"architect\", pd: \"product\", ql: \"quality\", of: \"offer\", tm: \"team\", cp: \"company\",\n                }\n    const handleSubmit = event => {\n      event.preventDefault()\n    }\n\n    const handleOnClick = category => {\n      setCategories([...categories, category])\n      console.log(\"categories: \", categories)\n    }\n    return (\n      <div\n        ref={ref}\n        style={style}\n        className={className}\n        aria-labelledby={labeledBy}\n      >\n        {/* <FormControl\n          autoFocus\n          className=\"mx-3 my-2 w-auto\"\n          placeholder=\"Type to filter category\"\n          onChange={e => setValue(e.target.value)}\n          value={value}\n        /> */}\n        \n        <Form onSubmit={handleSubmit}>\n          <div key={`inline-${type}`} className=\"mb-3\">\n            {categoryList.map(category => (\n              <Form.Check inline label={categoryMap[category]} type={type} id={`inline-${type}-${category}`} onClick={() => handleOnClick(category)} />\n            ))}\n          </div>\n        </Form>\n        \n        <ul className=\"list-unstyled w-auto\">\n          {React.Children.toArray(children).filter(\n            child =>\n              !value || child.props.children.toLowerCase().startsWith(value)\n          )}\n        </ul>\n      </div>\n    );\n  }\n);\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { ListGroup } from 'react-bootstrap'\nimport { searchCoCoOccurrence } from '../../../store/actions/coOccurrence'\nimport { Dropdown } from 'react-bootstrap';\nimport { CustomToggle, CustomMenu } from '../CoOccurredWord/CoOccurredWords'\nimport * as actionTypes from '../../../store/actions/actionTypes'\nimport Spinner from '../../UI/Spinner/Spinner'\n\n\nconst KeywordListItem = props => {\n\n  if (props.keywords === null) return null\n  const keywordInCategory = props.keywords[props.keywordType]\n  \n  if (keywordInCategory === null || keywordInCategory === undefined) return null\n\n  const getCoOccurredWordsByCategory = (keyword) => {\n    props.onCoOccurrenceSearchStart()\n    props.onCoOccurrenceSearchSuccess(keyword)\n    console.log(\"search co-occurred words\")\n  }\n\n  let coOccurredWordDropdown = <Spinner />\n  let wordByCategory = {}\n  if (!props.loading && Object.keys(wordByCategory).length === 0) {\n    const coOccurredWordList = Object.keys(props.coOccurredWords)\n    coOccurredWordList.sort((a, b) => props.coOccurredWords[b].count - props.coOccurredWords[a].count);\n      coOccurredWordDropdown = coOccurredWordList.map((word, index) => (\n      <Dropdown.Item key={index} eventKey={index}>{word}</Dropdown.Item>\n    ))\n    for (let [key, value] of Object.entries(props.coOccurredWords)) {\n      if (!(value.category in wordByCategory)) {\n        wordByCategory[value.category] = [key]\n      } else {\n        wordByCategory[value.category].push(key)\n      }\n    }\n    console.log(\"wordByCategory: \", wordByCategory)\n  }\n\n  const keywordListItem = keywordInCategory.slice(0, 8).map((keyword, index) => (\n      <ListGroup.Item variant=\"light\" key={index} action onClick={() => getCoOccurredWordsByCategory(keyword)}>\n        <Dropdown>\n          <Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\">\n            {keyword}\n          </Dropdown.Toggle>\n          <Dropdown.Menu as={CustomMenu}>\n            {coOccurredWordDropdown}\n          </Dropdown.Menu>\n        </Dropdown>\n      </ListGroup.Item>\n  ))\n  return keywordListItem;\n}\n\nconst mapStateToProps = state => {\n  return {\n    keywords: state.keyword.orderedKeywordByCategory,\n    loading: state.coOccurrence.loading,\n    coOccurredWords: state.coOccurrence.coOccurredWords\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onCoOccurrenceSearchStart: () => dispatch({ type: actionTypes.COOCCURRENCE_SEARCH_START }),\n    onCoOccurrenceSearchSuccess: searchInput => dispatch(searchCoCoOccurrence(searchInput))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KeywordListItem);\n\n","import React from 'react'\nimport KeywordListItem from './KeywordListItem';\nimport { ListGroup } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\n\nclass KeywordList extends React.Component {\n\n  render() {\n    return (\n      <Col sm={2} className=\"align-self-start\">\n        <ListGroup horizontal>\n          <a href='#' className={'list-group-item ' + (this.props.keywordListCSS)}>{this.props.categoryTitle}</a>\n          <KeywordListItem keywordType={this.props.keywordType}/>\n        </ListGroup>\n      </Col>\n    )\n  }\n\n}\n\nexport default KeywordList","import React from 'react'\nimport { Row } from 'react-bootstrap';\nimport KeywordList from './KeywordList';\nimport { connect } from 'react-redux';\nimport Spinner from '../../UI/Spinner/Spinner';\n\n\nconst KeywordListGroup = props => {\n\n  const categories = [\n    {categoryTitle: \"Programming Language\", keywordType: \"programmingLanguage\", keywordListCSS:\"list-group-item-warning\" },\n    {categoryTitle: \"Other Language\", keywordType: \"otherLanguage\", keywordListCSS:\"list-group-item-success\" },\n    {categoryTitle: \"Library\", keywordType: \"library\", keywordListCSS:\"list-group-item-primary\" },\n    {categoryTitle: \"Framework\", keywordType: \"framework\", keywordListCSS:\"list-group-item-warning\" },\n    {categoryTitle: \"Division\", keywordType: \"division\", keywordListCSS:\"list-group-item-success\" },\n    {categoryTitle: \"Position\", keywordType: \"position\", keywordListCSS:\"list-group-item-primary\" },\n    {categoryTitle: \"Platform\", keywordType: \"platform\", keywordListCSS:\"list-group-item-warning\" },\n    {categoryTitle: \"Approach\", keywordType: \"approach\", keywordListCSS:\"list-group-item-success\" },\n    {categoryTitle: \"Data Storage\", keywordType: \"dataStorage\", keywordListCSS:\"list-group-item-warning\" },\n    {categoryTitle: \"Data Transmission\", keywordType: \"dataTransmission\", keywordListCSS:\"list-group-item-success\" },\n    {categoryTitle: \"Server\", keywordType: \"server\", keywordListCSS:\"list-group-item-primary\" },\n    {categoryTitle: \"Software Engineering\", keywordType: \"softwareEngineering\", keywordListCSS:\"list-group-item-warning\" },\n    {categoryTitle: \"Computer Science\", keywordType: \"computerScience\", keywordListCSS:\"list-group-item-success\" },\n    {categoryTitle: \"Architect\", keywordType: \"architect\", keywordListCSS:\"list-group-item-primary\" },\n    {categoryTitle: \"AI\", keywordType: \"ai\", keywordListCSS:\"list-group-item-warning\" },\n    {categoryTitle: \"Quality\", keywordType: \"quality\", keywordListCSS:\"list-group-item-success\" },\n    {categoryTitle: \"Product\", keywordType: \"softwareProduct\", keywordListCSS:\"list-group-item-primary\" },\n    {categoryTitle: \"Work Experience\", keywordType: \"workExperience\", keywordListCSS:\"list-group-item-warning\" },\n    {categoryTitle: \"Tool\", keywordType: \"tool\", keywordListCSS:\"list-group-item-success\" },\n    {categoryTitle: \"Soft Skill\", keywordType: \"softSkill\", keywordListCSS:\"list-group-item-primary\" },\n    {categoryTitle: \"Offer\", keywordType: \"offer\", keywordListCSS:\"list-group-item-warning\" },\n    {categoryTitle: \"Team\", keywordType: \"team\", keywordListCSS:\"list-group-item-success\" },\n    {categoryTitle: \"Company\", keywordType: \"company\", keywordListCSS:\"list-group-item-primary\" },\n  ]\n\n  const KeywordListRows = categories.map((category, index) => (\n    <Row key={index}>\n      <KeywordList\n        categoryTitle={category.categoryTitle}\n        keywordType={category.keywordType}\n        keywordListCSS={category.keywordListCSS}\n      />\n    </Row>\n  ))\n\n  const keywordListGroup = props.keywordsLoading ? <Spinner /> : KeywordListRows;\n\n  return keywordListGroup\n}\n\nconst mapStateToProps = state => {\n  return {\n    jobDescriptionLoading: state.jobDescription.loading,\n    keywordsLoading: state.keyword.loading\n  }\n}\n\nexport default connect(mapStateToProps)(KeywordListGroup);\n","import React from \"react\";\nimport JobDescriptionList from '../JobDescription/JobDescriptionList';\nimport { Col, Row } from 'react-bootstrap';\nimport KeywordListGroup from \"../Keywords/KeywordList/KeywordListGroup\";\n\n\nclass SearchResult extends React.Component {\n  \n  render() {\n    const searchResult = (\n      <Row className=\"justify-content-md-center\">\n        <Col xs={5}>\n          <KeywordListGroup />\n        </Col>\n        <Col xs={5}>\n          <JobDescriptionList />\n        </Col>    \n      </Row>\n    )\n    return searchResult\n  }\n  \n}\n\nexport default SearchResult;\n","import React from 'react'\nimport { Route } from 'react-router';\nimport SearchForm from '../Search/SearchForm';\nimport { Navbar, Nav, Row, Col } from 'react-bootstrap';\n\nclass NavBar extends React.Component {\n  render() {\n    return (\n      <Row className=\"justify-content-md-center\">\n        <Col xs={10}>\n          <Navbar sticky=\"top\" bg=\"light\" variant=\"light\" expand=\"lg\" className=\"justify-content-between mb-5\">\n            <Navbar.Brand href=\"/alaitp-frontend\">ALAITP</Navbar.Brand>\n            <Route path='/alaitp-frontend/keywords' render={(props) => <SearchForm {...props} inputCSS=\"mr-sm-2\" buttonCSS=\"btn btn-outline-primary\" show />} />\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"ml-auto\">\n                <Nav.Link href=\"/alaitp-frontend\">Home</Nav.Link>\n                <Nav.Link href=\"/alaitp-frontend\">About</Nav.Link>\n                <Nav.Link href=\"/alaitp-frontend\">Services</Nav.Link>\n                <Nav.Link href=\"/alaitp-frontend\">Contact</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default NavBar\n","import React, { Fragment } from \"react\";\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router'\nimport SearchBar from \"../../components/Search/SearchBar\";\nimport SearchResults from \"../../components/Search/SearchResults\"\nimport NavBar from '../../components/UI/NavigationBar'\n\nconst Layout = props => {\n\n  \n  return (\n    <Fragment>\n      <Route path='/alaitp-frontend' exact component={SearchBar} />\n      <Route path='/alaitp-frontend/keywords' component={NavBar} />\n      <Route path='/alaitp-frontend/keywords' render={() => <SearchResults show={props.loading || props.searchComplete} />} />\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    searchComplete: state.keyword.searchComplete,\n    loading: state.keyword.loading\n  }\n}\n\n\n\nexport default connect(mapStateToProps)(Layout);\n","import React from 'react';\n\nimport Layout from './containers/Layout/Layout';\n\nconst App = () => {\n  return (\n    <div>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from './../../shared/utility'\n\nconst initialState = {\n  searchComplete: false,\n  loading: false,\n  searchInput: '',\n  orderedKeywordByCategory: {},\n  keywordIndexByJob: null,\n  cacheError: false,\n  error: false\n}\n\nconst setKeywords = (state, payload) => {\n  const allKeywordsByCategory = payload.keywords.orderedKeywordByCategory\n\n  return updateObject(state, {\n    orderedKeywordByCategory: {\n      programmingLanguage: allKeywordsByCategory.PROGRAMMING_LANGUAGE,\n      otherLanguage: allKeywordsByCategory.OTHER_LANGUAGE,\n      library: allKeywordsByCategory.LIBRARY,\n      framework: allKeywordsByCategory.FRAMEWORK,\n      division: allKeywordsByCategory.DIVISION,\n      position: allKeywordsByCategory.POSITION,\n      dataStorage: allKeywordsByCategory.DATA_STORAGE,\n      dataTransmission: allKeywordsByCategory.DATA_TRANSMISSION,\n      server: allKeywordsByCategory.SERVER,\n      platform: allKeywordsByCategory.PLATFORM,\n      approach: allKeywordsByCategory.APPROACH,\n      softwareEngineering: allKeywordsByCategory.SOFTWARE_ENGINEERING,\n      computerScience: allKeywordsByCategory.COMPUTER_SCIENCE,\n      ai: allKeywordsByCategory.AI,\n      os: allKeywordsByCategory.OS,\n      architect: allKeywordsByCategory.ARCHITECT,\n      quality: allKeywordsByCategory.QUALITY,\n      protocol: allKeywordsByCategory.PROTOCOL,\n      tool: allKeywordsByCategory.TOOL,\n      softwareProduct: allKeywordsByCategory.SOFTWARE_PRODUCT,\n      workExperience: allKeywordsByCategory.WORK_EXPERIENCE,\n      softSkill: allKeywordsByCategory.SOFT_SKILL,\n      offer: allKeywordsByCategory.OFFER,\n      team: allKeywordsByCategory.TEAM,\n      company: allKeywordsByCategory.COMPANY,\n    },\n    keywordIndexByJob: payload.keywords.keywordIndexByJob,\n    jobMap: payload.jobMap,\n    loading: false,\n    searchComplete: true\n  })\n\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.KEYWORD_SEARCH_START:\n      console.log(\"keyword search start\")\n      return {\n        ...state,\n        searchComplete: false,\n        loading: true\n      }\n\n    case actionTypes.KEYWORD_SEARCH_SUCCESS:\n        console.log(\"keyword search complete\")\n        return setKeywords(state, action)\n        \n    case actionTypes.JOB_SEARCH_CACHE_FAIL:\n        console.log(\"job cache fail, trying post job description\")\n        return {\n          ...state,\n          cacheError: true,\n          searchComplete: false\n        }\n\n    case actionTypes.KEYWORD_SEARCH_FAIL:\n        return {\n          ...state,\n          loading: false,\n          searchComplete: false\n        }\n  \n    default:\n      return state\n  }\n}\n\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../../shared/utility'\n\nconst initialState = {\n  searchComplete: false,\n  loading: false,\n  searchInput: '',\n  jobSearchId: null,\n  jobMap: {},\n  error: false,\n}\n\nconst setJobMap = (state, payload) => {\n  return updateObject(state, {\n    jobMap: payload.jobMap,\n    jobSearchId: payload.jobSearchId,\n    loading: false,\n    searchComplete: true\n  })\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.JOB_SEARCH_START:\n      console.log(\"job search start\")\n      return {\n        ...state,\n        loading: true\n      }\n\n    case actionTypes.JOB_SEARCH_SUCCESS:\n        console.log(\"job search complete\")\n        return setJobMap(state, action)\n\n    case actionTypes.JOB_SEARCH_FAIL:\n        return {\n          ...state,\n          loading: false,\n          searchComplete: true\n        }\n  \n    default:\n      return state\n  }\n}\n\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../../shared/utility'\n\nconst initialState = {\n  loading: false,\n  searchComplete: false,\n  coOccurredWords: {},\n  error: false\n}\n\nconst updateCoCoOccurredWords = (state, payload) => {\n  return updateObject(state, {\n    coOccurredWords: payload.coOccurredWords,\n    loading: false,\n    searchComplete: true\n  })\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.COOCCURRENCE_SEARCH_START:\n      console.log(\"co-occurrence search start\")\n      return {\n        ...state,\n        loading: true\n      }\n\n    case actionTypes.COOCCURRENCE_SEARCH_SUCCESS:\n        console.log(\"co-occurrence search complete\")\n        return updateCoCoOccurredWords(state, action)\n\n    case actionTypes.COOCCURRENCE_SEARCH_FAIL:\n        return {\n          ...state,\n          loading: false,\n          searchComplete: true\n        }\n  \n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport keywordReducer from './store/reducers/keywordSearch'\nimport jobReducer from './store/reducers/jobSearch'\nimport coOccurrenceReducer from './store/reducers/coOccurrence'\nimport thunk from \"redux-thunk\";\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst rootReducer = combineReducers({\n  keyword: keywordReducer,\n  jobDescription: jobReducer,\n  coOccurrence: coOccurrenceReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n))\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1twK-\",\"load2\":\"Spinner_load2__2gkgc\"};"],"sourceRoot":""}