{"version":3,"sources":["components/UI/Input/Input.js","shared/utility.js","components/UI/Button.js","components/Search/SearchForm.js","store/actions/actionTypes.js","store/actions/jobSearch.js","components/Search/SearchBar.js","components/JobDescription/JobDescriptionText.js","components/JobDescription/JobDescription.js","components/UI/Spinner/Spinner.js","store/actions/keywordSearch.js","components/JobDescription/JobDescriptionList.js","store/actions/coOccurrence.js","components/Keywords/CoOccurredWord/CoOccurredWords.js","components/Keywords/KeywordList/KeywordListItem.js","components/Keywords/KeywordList/KeywordList.js","components/Keywords/KeywordList/KeywordListGroup.js","components/Search/SearchResults.js","components/UI/NavigationBar.js","containers/Layout/Layout.js","App.js","serviceWorker.js","store/reducers/keywordSearch.js","store/reducers/jobSearch.js","store/reducers/coOccurrence.js","index.js","components/UI/Input/Input.module.css","components/UI/Spinner/Spinner.module.css"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","elementConfig","value","onChange","changed","options","map","option","key","displayValue","updateObject","oldObject","updatedProperties","Button","onClick","clicked","disabled","children","connect","dispatch","onJobSearchStart","type","onJobSearchSuccess","searchInput","requestId","require","uuidv4","console","log","Axios","get","then","response","jobMap","data","jobSearchId","catch","error","searchJobs","useState","placeholder","validation","required","valid","searchForm","setSearchForm","inputChangedHandler","event","updatedSearchForm","target","handleSubmit","preventDefault","history","onSearchBar","Form","onSubmit","Row","Col","xs","inputCSS","buttonCSS","onNavBar","inline","FormControl","show","SearchBar","Container","xl","lg","md","path","exact","render","state","keywordSearchComplete","keyword","searchComplete","keywordIndex","keywordIndexByJob","jobDescriptionText","opened","Fragment","keywordList","jobId","keywordIndices","keywordObj","startIdx","endIdx","category","sort","a","b","undefined","jobTextWithKeywordsArray","substring","categoryColorMap","i","length","badgeColor","keywordBadge","OverlayTrigger","placement","overlay","Tooltip","id","Badge","variant","textBetweenBadges","JobDescription","open","setOpen","setOpened","Card","style","width","Body","Title","title","company","Subtitle","aria-controls","aria-expanded","tags","Collapse","in","Spinner","Loader","setKeywords","keywords","JobDescriptionList","searchResult","this","loading","onKeywordSearchStart","cacheError","onJobCacheFail","Object","keys","jobTitle","React","Component","jobDescription","desc","post","setCoCoOccurredWords","coOccurredWords","words","CustomToggle","forwardRef","ref","e","CustomMenu","labeledBy","setValue","aria-labelledby","autoFocus","Children","toArray","filter","child","toLowerCase","startsWith","orderedKeywordByCategory","coOccurrence","onCoOccurrenceSearchStart","onCoOccurrenceSearchSuccess","word","categories","count","replace","searchCoCoOccurrence","keywordInCategory","keywordType","coOccurredWordDropdown","index","Dropdown","Item","eventKey","slice","ListGroup","action","getCoOccurredWordsByCategory","Toggle","as","Menu","KeywordList","sm","horizontal","href","keywordListCSS","categoryTitle","jobDescriptionLoading","keywordsLoading","KeywordListRows","SearchResult","NavBar","Navbar","sticky","bg","expand","Brand","Nav","Link","component","SearchResults","App","Boolean","window","location","hostname","match","initialState","payload","allKeywordsByCategory","programmingLanguage","PROGRAMMING_LANGUAGE","otherLanguage","OTHER_LANGUAGE","library","LIBRARY","framework","FRAMEWORK","division","DIVISION","position","POSITION","dataStorage","DATA_STORAGE","dataTransmission","DATA_TRANSMISSION","server","SERVER","platform","PLATFORM","approach","APPROACH","softwareEngineering","SOFTWARE_ENGINEERING","computerScience","COMPUTER_SCIENCE","ai","AI","os","OS","architect","ARCHITECT","quality","QUALITY","protocol","PROTOCOL","tool","TOOL","softwareProduct","SOFTWARE_PRODUCT","workExperience","WORK_EXPERIENCE","softSkill","SOFT_SKILL","offer","OFFER","team","TEAM","COMPANY","reducer","setJobMap","updateCoCoOccurredWords","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","keywordReducer","jobReducer","coOccurrenceReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b4a13735.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Input.module.css'\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement]\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={props.className}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                    />\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={classes.InputElement}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                    />\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select \r\n                className={classes.InputElement}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>\r\n            break;\r\n        default:\r\n            inputElement = <input className={classes.InputElement} {...props.elementConfig} value={props.value} />\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n}\r\n\r\nexport const checkValidity = ( value, rules ) => {\r\n    let isValid = true\r\n    if (!rules) {\r\n        return true;\r\n    }\r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid\r\n    }\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid\r\n    }\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid\r\n    } \r\n    if (rules.isEmail) {\r\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n        isValid = pattern.test(value) && isValid\r\n    }\r\n    if (rules.isNumeric) {\r\n        const pattern = /^\\d+$/;\r\n        isValid = pattern.test(value) && isValid\r\n    }\r\n    return isValid\r\n}","import React from 'react'\r\n\r\nconst Button = (props) => (\r\n    <button \r\n        className={props.className}\r\n        onClick={props.clicked}\r\n        disabled={props.disabled}\r\n        >\r\n        {props.children}\r\n    </button>\r\n);\r\n\r\nexport default Button;","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Input from \"../UI/Input/Input\";\r\nimport { updateObject } from \"../../shared/utility\";\r\n\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\nimport Button from \"../UI/Button\";\r\nimport { searchJobs } from \"../../store/actions/jobSearch\";\r\nimport { Form, FormControl } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\nimport { Col } from 'react-bootstrap';\r\n\r\nconst SearchForm = props => {\r\n  const [searchForm, setSearchForm] = useState({\r\n    elementType: \"input\",\r\n    elementConfig: {\r\n      type: \"text\",\r\n      placeholder: \"Place You Want To Work\"\r\n    },\r\n    value: \"\",\r\n    validation: {\r\n      required: true\r\n    },\r\n    valid: true,\r\n    touched: false\r\n  });\r\n\r\n  const inputChangedHandler = event => {\r\n    const updatedSearchForm = updateObject(searchForm, {\r\n      value: event.target.value,\r\n      touched: true\r\n    });\r\n    setSearchForm(updatedSearchForm)\r\n  }\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault()\r\n    props.onJobSearchStart()\r\n    props.history.push(`/keywords/${searchForm.value}`)\r\n    props.onJobSearchSuccess(searchForm.value)\r\n  }\r\n\r\n  const onSearchBar = (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Row>\r\n        <Col xs={9}>\r\n          <Input\r\n            className={props.inputCSS}\r\n            elementType={searchForm.elementType}\r\n            elementConfig={searchForm.elementConfig}\r\n            value={searchForm.value}\r\n            invalid={!searchForm.valid}\r\n            shouldValidate={searchForm.validation}\r\n            touched={searchForm.touched}\r\n            changed={event => inputChangedHandler(event)}\r\n          />\r\n        </Col>\r\n        <Col xs={3}>\r\n          <Button type=\"submit\" className={props.buttonCSS}>\r\n            Search\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n    )\r\n\r\n  const onNavBar = (\r\n    <Form onSubmit={handleSubmit} inline>\r\n      <FormControl\r\n        className={props.inputCSS}\r\n        type={searchForm.elementConfig.type}\r\n        value={searchForm.value}\r\n        onChange={event => inputChangedHandler(event)}\r\n      />\r\n      <Button type=\"submit\" className={props.buttonCSS}>\r\n        Search\r\n      </Button>\r\n    </Form>\r\n  )\r\n\r\n  return props.show ? onNavBar: onSearchBar\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onJobSearchStart: () => dispatch({ type: actionTypes.JOB_SEARCH_START }),\r\n    onJobSearchSuccess: searchInput => dispatch(searchJobs(searchInput))\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchForm);\r\n","export const KEYWORD_SEARCH_START = 'KEYWORD_SEARCH_START'\r\nexport const KEYWORD_SEARCH_SUCCESS = 'KEYWORD_SEARCH_SUCCESS'\r\nexport const KEYWORD_SEARCH_FAIL = 'KEYWORD_SEARCH_FAIL'\r\n\r\nexport const JOB_SEARCH_START = 'JOB_SEARCH_START'\r\nexport const JOB_SEARCH_CACHE_FAIL = 'JOB_SEARCH_CACHE_FAIL'\r\nexport const JOB_SEARCH_SUCCESS = 'JOB_SEARCH_SUCCESS'\r\nexport const JOB_SEARCH_FAIL = 'JOB_SEARCH_FAIL'\r\n\r\nexport const COOCCURRENCE_SEARCH_START = 'COOCCURRENCE_SEARCH_START'\r\nexport const COOCCURRENCE_SEARCH_SUCCESS = 'COOCCURRENCE_SEARCH_SUCCESS'\r\nexport const COOCCURRENCE_SEARCH_FAIL = 'COOCCURRENCE_SEARCH_FAIL'","import Axios from \"axios\";\r\n\r\nimport * as actionTypes from './actionTypes'\r\n\r\nexport const setJobs = (jobMap, jobSearchId) => {\r\n  return {\r\n    type: actionTypes.JOB_SEARCH_SUCCESS,\r\n    jobMap: jobMap,\r\n    jobSearchId: jobSearchId,\r\n  };\r\n};\r\n\r\nexport const searchJobs = searchInput => {\r\n  if (searchInput === '') searchInput = 'Software Engineer'\r\n  return dispatch => {\r\n    const uuidv4 = require('uuid/v4')\r\n    const requestId = uuidv4()\r\n    console.log(\"requestId: \" + requestId)\r\n    Axios.get(`http://127.0.0.1:8888/job-description-api/job-list/${searchInput}/${requestId}`)\r\n      .then(response => {\r\n        dispatch(setJobs(response.data, requestId))\r\n      })\r\n      .catch(error => {\r\n        console.log('error happened during searching keywords' + error)\r\n      })\r\n  };\r\n};","import React from \"react\";\r\nimport { Route } from 'react-router'\r\nimport SearchForm from \"./SearchForm\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nconst SearchBar = () => {\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <Row className=\"mt-5\">\r\n        <Col xl={9} className=\"mx-auto\" >\r\n          <h1 className=\"mt-5\">Search For Most Wanted Technical Skills!</h1>\r\n        </Col>\r\n        <Col xl={7} lg={8} md={10} className=\"mx-auto mt-5\" >\r\n          <Route path='/' exact render={(props) => <SearchForm {...props} inputCSS=\"form-control form-control-lg\" buttonCSS=\"btn btn-outline-primary btn-lg\" show={false} />} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchBar\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Badge, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\nconst JobDescriptionText = props => {\r\n  let jobDescriptionText = props.jobDescriptionText;\r\n  if (props.keywordSearchComplete) {\r\n    if (!props.opened) { // do not render keywords if the text hasn't been opened\r\n      return <React.Fragment>{jobDescriptionText}</React.Fragment>\r\n    }\r\n    const jobId = props.jobId\r\n    const keywordIndices = [];\r\n    let keywordList\r\n    try {\r\n      keywordList = props.keywordIndex[jobId]\r\n      for (const keywordObj of keywordList) {\r\n        keywordIndices.push([keywordObj.startIdx, keywordObj.endIdx, keywordObj.keyword, keywordObj.category])\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error, job id: \", jobId, \"keyword list: \", keywordList, error)\r\n      return <React.Fragment>{jobDescriptionText}</React.Fragment>\r\n    }\r\n    \r\n    // sort the keyword indices so it can break and combine job text with keywords in order\r\n    keywordIndices.sort((a, b) => a[0] - b[0]);\r\n\r\n    if (keywordIndices[0] === null || keywordIndices[0] === undefined) // no keywords\r\n      return <React.Fragment>{jobDescriptionText}</React.Fragment>;\r\n    \r\n      // init with the start to first keyword\r\n    let jobTextWithKeywordsArray = [props.jobDescriptionText.substring(0, keywordIndices[0][0])]\r\n    const categoryColorMap = {\r\n      \"PROGRAMMING_LANGUAGE\": \"primary\",\r\n      \"OTHER_LANGUAGE\": \"primary\",\r\n      \"LIBRARY\": \"info\",\r\n      \"FRAMEWORK\": \"info\",\r\n      \"DATA_STORAGE\": \"warning\",\r\n      \"DATA_TRANSMISSION\": \"warning\",\r\n      \"PLATFORM\": \"success\",\r\n      \"SERVER\": \"success\",\r\n      \"OS\": \"success\",\r\n      \"APPROACH\": \"secondary\",\r\n      \"SOFTWARE_ENGINEERING\": \"secondary\",\r\n      \"POSITION\": \"danger\",\r\n      \"DIVISION\": \"danger\",\r\n      \"WORK_EXPERIENCE\": \"danger\"\r\n    }\r\n    for (let i = 0; i < keywordIndices.length - 1; i++) {\r\n      if (keywordIndices[i][3] !== null) {\r\n        \r\n        let badgeColor = categoryColorMap[keywordIndices[i][3]]\r\n        if (badgeColor === undefined) {\r\n          badgeColor = \"dark\"\r\n        }\r\n        const keywordBadge = (\r\n          <OverlayTrigger\r\n            key={keywordIndices[i][0]}\r\n            placement={\"top\"}\r\n            overlay={\r\n              <Tooltip id={'tooltip-top'}>\r\n                <strong>{keywordIndices[i][3]}</strong>.\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <Badge variant={badgeColor} key={keywordIndices[i][0]}>\r\n              {props.jobDescriptionText.substring(\r\n                keywordIndices[i][0],\r\n                keywordIndices[i][1]\r\n              )}\r\n            </Badge>\r\n          </OverlayTrigger>\r\n          \r\n        );\r\n        const textBetweenBadges = props.jobDescriptionText.substring(\r\n          keywordIndices[i][1],\r\n          keywordIndices[i + 1][0]\r\n        );\r\n        jobTextWithKeywordsArray.push(keywordBadge);\r\n        jobTextWithKeywordsArray.push(textBetweenBadges);\r\n      }\r\n    }\r\n    // add text after the last\r\n    jobTextWithKeywordsArray.push(\r\n      props.jobDescriptionText.substring(\r\n        keywordIndices[keywordIndices.length - 1][0]\r\n      )\r\n    );\r\n    jobDescriptionText = <p>{jobTextWithKeywordsArray}</p>;\r\n  }\r\n  return <React.Fragment>{jobDescriptionText}</React.Fragment>\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    keywordSearchComplete: state.keyword.searchComplete,\r\n    keywordIndex: state.keyword.keywordIndexByJob\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(JobDescriptionText);\r\n","import React, { useState } from 'react';\r\nimport { Button, Collapse, Card } from 'react-bootstrap';\r\nimport JobDescriptionText from './JobDescriptionText';\r\n\r\nconst JobDescription = props => {\r\n  const [open, setOpen] = useState(false)\r\n  const [opened, setOpened] = useState(false)\r\n\r\n  const handleOpen = () => {\r\n    setOpen(!open)\r\n    setOpened(true) // for rendering the keywords\r\n  }\r\n\r\n  return (\r\n    <Card style={{ width: '49rem' }}>\r\n      <Card.Body>\r\n        <Card.Title className=\"clearfix\">\r\n          <p className=\"card-title float-left\"><strong>{props.title}</strong></p>\r\n          <p className=\"card-text float-right\">{props.company}</p>\r\n        </Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted clearfix\">\r\n          <Button\r\n            className=\"card-title float-left\"\r\n            variant=\"outline-info btn-sm\"\r\n            onClick={() => handleOpen()}\r\n            aria-controls=\"job-collapse-text\"\r\n            aria-expanded={open}\r\n          >See Job Text</Button>\r\n          <p className=\"card-text float-right\">{props.tags}</p>\r\n        </Card.Subtitle>\r\n        <Collapse in={open}>\r\n          <div id=\"job-collapse-text mx-1\">\r\n            <JobDescriptionText jobDescriptionText={props.jobDescriptionText} jobId={props.jobId} opened={opened}></JobDescriptionText>\r\n          </div>\r\n        </Collapse>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default JobDescription","import React from 'react'\r\nimport classes from './Spinner.module.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className={classes.Loader}>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import Axios from \"axios\"\r\n\r\nimport * as actionTypes from './actionTypes'\r\n\r\nexport const setKeywords = keywords => {\r\n  return {\r\n    type: actionTypes.KEYWORD_SEARCH_SUCCESS,\r\n    keywords: keywords\r\n  }\r\n}\r\n\r\nexport const setKeywordOnCacheFail = () => {\r\n  return {\r\n    type: actionTypes.JOB_SEARCH_CACHE_FAIL,\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * job descriptions are cache in redis by requestId after job search success,\r\n * send the requestId to job-keyword project\r\n * @param {string} requestId \r\n */\r\nexport const getJobKeyword = requestId => {\r\n  return dispatch => {\r\n    Axios.get(`http://localhost:8888/job-keyword/keywords/${requestId}`)\r\n      .then(response => {\r\n        console.log(\"getJobKeyword response\", response)\r\n        if (response.data.error === true) {\r\n          console.log(\"requestId cache failed, tring to post jobs\", response)\r\n          dispatch(setKeywordOnCacheFail())\r\n        } else {\r\n          dispatch(setKeywords(response.data))\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(`error happened during searching keywords, request id: ${requestId}`, error)\r\n      })\r\n  }\r\n}\r\n\r\n/**\r\n * Post all jobDescription to backend to get job keywords,\r\n * backup plan if get keywords by requestId fails\r\n * @param {object} jobDescription \r\n */\r\nexport const postJobKeyword = jobDescription => {\r\n  if (jobDescription === '' || jobDescription === undefined) jobDescription = {desc: 'description'}\r\n  return dispatch => {\r\n    Axios.post(`http://localhost:8888/job-keyword/keywords`, jobDescription)\r\n      .then(response => {\r\n        console.log(\"postJobKeyword response\", response)\r\n        dispatch(setKeywords(response.data))\r\n      })\r\n      .catch(error => {\r\n        console.log('error happened during searching keywords' + error)\r\n      })\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport JobDescription from \"./JobDescription\";\r\nimport Spinner from \"./../UI/Spinner/Spinner\";\r\n\r\nimport * as actionTypes from \"../../store/actions/actionTypes\"\r\nimport { getJobKeyword, postJobKeyword } from \"../../store/actions/keywordSearch\";\r\n\r\nclass JobDescriptionList extends React.Component {\r\n\r\n  render() {\r\n    let searchResult = <Spinner />;\r\n    if (!this.props.loading) {\r\n\r\n      this.props.onKeywordSearchStart()\r\n      this.props.onJobSearchSuccess(this.props.jobSearchId)\r\n\r\n      if (this.props.cacheError === true) {\r\n        this.props.onJobCacheFail(this.props.jobMap)\r\n      }\r\n\r\n      searchResult = Object.keys(this.props.jobMap)\r\n        .map((jobId) => (\r\n          <JobDescription\r\n            jobId={jobId}\r\n            key={jobId}\r\n            title={this.props.jobMap[jobId].jobTitle}\r\n            company={this.props.jobMap[jobId].company}\r\n            tags={this.props.jobMap[jobId].tags}\r\n            jobDescriptionText={this.props.jobMap[jobId].jobDescriptionText}\r\n          />\r\n        ));\r\n    }\r\n\r\n    return <React.Fragment>{searchResult}</React.Fragment>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    jobSearchId: state.jobDescription.jobSearchId,\r\n    jobMap: state.jobDescription.jobMap,\r\n    loading: state.jobDescription.loading,\r\n    cacheError: state.keyword.cacheError\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onKeywordSearchStart: () => dispatch({ type: actionTypes.KEYWORD_SEARCH_START }),\r\n    onJobSearchSuccess: jobSearchId => dispatch(getJobKeyword(jobSearchId)),\r\n    onJobCacheFail: jobMap => dispatch(postJobKeyword(jobMap)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JobDescriptionList);\r\n","import Axios from 'axios'\r\n\r\nimport * as actionTypes from './actionTypes'\r\n\r\nexport const setCoCoOccurredWords = coOccurredWords => {\r\n  return {\r\n    type: actionTypes.COOCCURRENCE_SEARCH_SUCCESS,\r\n    coOccurredWords: coOccurredWords.words,\r\n  }\r\n}\r\n\r\nexport const searchCoCoOccurrence = (word, categories='all', count=20) => {\r\n  word = word.replace('#', '%23')\r\n  return dispatch => {\r\n    console.log(`get ${count} co-occurred words for word: ${word} in categories: ${categories}`)\r\n    Axios.get(`http://127.0.0.1:8888/co_occurrence_matrix/most-correlated-words/${word}/${count}/${categories}`)\r\n      .then(response => {\r\n        console.log(response.data)\r\n        dispatch(setCoCoOccurredWords(response.data))\r\n      })\r\n      .catch(error => {\r\n        console.log('error happened during searching keywords' + error)\r\n      })\r\n  }\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { FormControl } from \"react-bootstrap\";\r\n\r\nexport const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\r\n  \r\n  <p ref={ref} onClick={e => {\r\n      e.preventDefault();\r\n      onClick(e);\r\n    }}\r\n  >\r\n    {children}\r\n  </p>\r\n));\r\n\r\n// forwardRef again here!\r\n// Dropdown needs access to the DOM of the Menu to measure it\r\nexport const CustomMenu = React.forwardRef(\r\n  ({ children, style, className, \"aria-labelledby\": labeledBy }, ref) => {\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={style}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <FormControl\r\n          autoFocus\r\n          className=\"mx-3 my-2 w-auto\"\r\n          placeholder=\"Type to filter category\"\r\n          onChange={e => setValue(e.target.value)}\r\n          value={value}\r\n        />\r\n        <ul className=\"list-unstyled\">\r\n          {React.Children.toArray(children).filter(\r\n            child =>\r\n              !value || child.props.children.toLowerCase().startsWith(value)\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { searchCoCoOccurrence } from '../../../store/actions/coOccurrence'\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { CustomToggle, CustomMenu } from '../CoOccurredWord/CoOccurredWords'\r\nimport * as actionTypes from '../../../store/actions/actionTypes';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\n\r\nconst KeywordListItem = props => {\r\n\r\n  if (props.keywords === null) return null\r\n  const keywordInCategory = props.keywords[props.keywordType]\r\n  \r\n  if (keywordInCategory === null || keywordInCategory === undefined) return null\r\n\r\n  const getCoOccurredWordsByCategory = (keyword) => {\r\n    props.onCoOccurrenceSearchStart()\r\n    props.onCoOccurrenceSearchSuccess(keyword)\r\n    console.log(\"search co-occurred words\")\r\n  }\r\n\r\n  let coOccurredWordDropdown = <Spinner />\r\n  if (!props.loading) {\r\n      coOccurredWordDropdown = Object.keys(props.coOccurredWords).map((word, index) => (\r\n      <Dropdown.Item key={index} eventKey={index}>{word}</Dropdown.Item>\r\n    ))\r\n  }\r\n\r\n  const keywordListItem = keywordInCategory.slice(0, 8).map((keyword, index) => (\r\n      <ListGroup.Item variant=\"light\" key={index} action onClick={() => getCoOccurredWordsByCategory(keyword)}>\r\n        <Dropdown>\r\n          <Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\">\r\n            {keyword}\r\n          </Dropdown.Toggle>\r\n          <Dropdown.Menu as={CustomMenu}>\r\n            {coOccurredWordDropdown}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </ListGroup.Item>\r\n  ))\r\n  return keywordListItem;\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    keywords: state.keyword.orderedKeywordByCategory,\r\n    loading: state.coOccurrence.loading,\r\n    coOccurredWords: state.coOccurrence.coOccurredWords\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onCoOccurrenceSearchStart: () => dispatch({ type: actionTypes.COOCCURRENCE_SEARCH_START }),\r\n    onCoOccurrenceSearchSuccess: searchInput => dispatch(searchCoCoOccurrence(searchInput))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KeywordListItem);\r\n\r\n","import React from 'react'\r\nimport KeywordListItem from './KeywordListItem';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { Col } from 'react-bootstrap';\r\n\r\nconst KeywordList = props => {\r\n  return (\r\n    <Col sm={2} className=\"align-self-start\">\r\n      <ListGroup horizontal>\r\n        <a href='/' className={'list-group-item ' + (props.keywordListCSS)}>{props.categoryTitle}</a>\r\n        <KeywordListItem keywordType={props.keywordType}/>\r\n      </ListGroup>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport default KeywordList","import React from 'react'\r\nimport { Row } from 'react-bootstrap';\r\nimport KeywordList from './KeywordList';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\n\r\nconst KeywordListGroup = props => {\r\n\r\n  const categories = [\r\n    {categoryTitle: \"Programming Language\", keywordType: \"programmingLanguage\", keywordListCSS:\"list-group-item-warning\" },\r\n    {categoryTitle: \"Other Language\", keywordType: \"otherLanguage\", keywordListCSS:\"list-group-item-success\" },\r\n    {categoryTitle: \"Library\", keywordType: \"library\", keywordListCSS:\"list-group-item-primary\" },\r\n    {categoryTitle: \"Framework\", keywordType: \"framework\", keywordListCSS:\"list-group-item-warning\" },\r\n    {categoryTitle: \"Division\", keywordType: \"division\", keywordListCSS:\"list-group-item-success\" },\r\n    {categoryTitle: \"Position\", keywordType: \"position\", keywordListCSS:\"list-group-item-primary\" },\r\n    {categoryTitle: \"Platform\", keywordType: \"platform\", keywordListCSS:\"list-group-item-warning\" },\r\n    {categoryTitle: \"Approach\", keywordType: \"approach\", keywordListCSS:\"list-group-item-success\" },\r\n    {categoryTitle: \"Data Storage\", keywordType: \"dataStorage\", keywordListCSS:\"list-group-item-warning\" },\r\n    {categoryTitle: \"Data Transmission\", keywordType: \"dataTransmission\", keywordListCSS:\"list-group-item-success\" },\r\n    {categoryTitle: \"Server\", keywordType: \"server\", keywordListCSS:\"list-group-item-primary\" },\r\n    {categoryTitle: \"Software Engineering\", keywordType: \"softwareEngineering\", keywordListCSS:\"list-group-item-warning\" },\r\n    {categoryTitle: \"Computer Science\", keywordType: \"computerScience\", keywordListCSS:\"list-group-item-success\" },\r\n    {categoryTitle: \"Architect\", keywordType: \"architect\", keywordListCSS:\"list-group-item-primary\" },\r\n    {categoryTitle: \"AI\", keywordType: \"ai\", keywordListCSS:\"list-group-item-warning\" },\r\n    {categoryTitle: \"Quality\", keywordType: \"quality\", keywordListCSS:\"list-group-item-success\" },\r\n    {categoryTitle: \"Product\", keywordType: \"softwareProduct\", keywordListCSS:\"list-group-item-primary\" },\r\n    {categoryTitle: \"Work Experience\", keywordType: \"workExperience\", keywordListCSS:\"list-group-item-warning\" },\r\n    {categoryTitle: \"Tool\", keywordType: \"tool\", keywordListCSS:\"list-group-item-success\" },\r\n    {categoryTitle: \"Soft Skill\", keywordType: \"softSkill\", keywordListCSS:\"list-group-item-primary\" },\r\n    {categoryTitle: \"Offer\", keywordType: \"offer\", keywordListCSS:\"list-group-item-warning\" },\r\n    {categoryTitle: \"Team\", keywordType: \"team\", keywordListCSS:\"list-group-item-success\" },\r\n    {categoryTitle: \"Company\", keywordType: \"company\", keywordListCSS:\"list-group-item-primary\" },\r\n  ]\r\n\r\n  const KeywordListRows = categories.map((category, index) => (\r\n    <Row key={index}>\r\n      <KeywordList\r\n        categoryTitle={category.categoryTitle}\r\n        keywordType={category.keywordType}\r\n        keywordListCSS={category.keywordListCSS}\r\n      />\r\n    </Row>\r\n  ))\r\n\r\n  const keywordListGroup = props.keywordsLoading ? <Spinner /> : KeywordListRows;\r\n\r\n  return keywordListGroup\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    jobDescriptionLoading: state.jobDescription.loading,\r\n    keywordsLoading: state.keyword.loading\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(KeywordListGroup);\r\n","import React from \"react\";\r\nimport JobDescriptionList from '../JobDescription/JobDescriptionList';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport KeywordListGroup from \"../Keywords/KeywordList/KeywordListGroup\";\r\n\r\n\r\nconst SearchResult = () => {\r\n\r\n  const searchResult = (\r\n    <Row className=\"justify-content-md-center\">\r\n      <Col xs={5}>\r\n        <KeywordListGroup />\r\n      </Col>\r\n      <Col xs={5}>\r\n        <JobDescriptionList />\r\n      </Col>    \r\n    </Row>\r\n  )\r\n\r\n  return searchResult\r\n};\r\n\r\nexport default SearchResult;\r\n","import React from 'react'\r\nimport { Route } from 'react-router';\r\nimport SearchForm from '../Search/SearchForm';\r\nimport { Navbar, Nav, Row, Col } from 'react-bootstrap';\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <Row className=\"justify-content-md-center\">\r\n      <Col xs={10}>\r\n        <Navbar sticky=\"top\" bg=\"light\" variant=\"light\" expand=\"lg\" className=\"justify-content-between mb-5\">\r\n          <Navbar.Brand href=\"/\">ALAITP</Navbar.Brand>\r\n          <Route path='/keywords' render={(props) => <SearchForm {...props} inputCSS=\"mr-sm-2\" buttonCSS=\"btn btn-outline-primary\" show />} />\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"ml-auto\">\r\n              <Nav.Link href=\"/\">Home</Nav.Link>\r\n              <Nav.Link href=\"/\">About</Nav.Link>\r\n              <Nav.Link href=\"/\">Services</Nav.Link>\r\n              <Nav.Link href=\"/\">Contact</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","import React, { Fragment } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { Route } from 'react-router'\r\nimport SearchBar from \"../../components/Search/SearchBar\";\r\nimport SearchResults from \"../../components/Search/SearchResults\"\r\nimport NavBar from '../../components/UI/NavigationBar'\r\n\r\nconst Layout = props => {\r\n\r\n  \r\n  return (\r\n    <Fragment>\r\n      <Route path='/' exact component={SearchBar} />\r\n      <Route path='/keywords' component={NavBar} />\r\n      <Route path='/keywords' render={() => <SearchResults show={props.loading || props.searchComplete} />} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchComplete: state.keyword.searchComplete,\r\n    loading: state.keyword.loading\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Layout);\r\n","import React from 'react';\n\nimport Layout from './containers/Layout/Layout';\n\nconst App = () => {\n\n  return (\n    <div>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\r\nimport { updateObject } from './../../shared/utility'\r\n\r\nconst initialState = {\r\n  searchComplete: false,\r\n  loading: false,\r\n  searchInput: '',\r\n  orderedKeywordByCategory: {},\r\n  keywordIndexByJob: null,\r\n  cacheError: false,\r\n  error: false\r\n}\r\n\r\nconst setKeywords = (state, payload) => {\r\n  const allKeywordsByCategory = payload.keywords.orderedKeywordByCategory\r\n\r\n  return updateObject(state, {\r\n    orderedKeywordByCategory: {\r\n      programmingLanguage: allKeywordsByCategory.PROGRAMMING_LANGUAGE,\r\n      otherLanguage: allKeywordsByCategory.OTHER_LANGUAGE,\r\n      library: allKeywordsByCategory.LIBRARY,\r\n      framework: allKeywordsByCategory.FRAMEWORK,\r\n      division: allKeywordsByCategory.DIVISION,\r\n      position: allKeywordsByCategory.POSITION,\r\n      dataStorage: allKeywordsByCategory.DATA_STORAGE,\r\n      dataTransmission: allKeywordsByCategory.DATA_TRANSMISSION,\r\n      server: allKeywordsByCategory.SERVER,\r\n      platform: allKeywordsByCategory.PLATFORM,\r\n      approach: allKeywordsByCategory.APPROACH,\r\n      softwareEngineering: allKeywordsByCategory.SOFTWARE_ENGINEERING,\r\n      computerScience: allKeywordsByCategory.COMPUTER_SCIENCE,\r\n      ai: allKeywordsByCategory.AI,\r\n      os: allKeywordsByCategory.OS,\r\n      architect: allKeywordsByCategory.ARCHITECT,\r\n      quality: allKeywordsByCategory.QUALITY,\r\n      protocol: allKeywordsByCategory.PROTOCOL,\r\n      tool: allKeywordsByCategory.TOOL,\r\n      softwareProduct: allKeywordsByCategory.SOFTWARE_PRODUCT,\r\n      workExperience: allKeywordsByCategory.WORK_EXPERIENCE,\r\n      softSkill: allKeywordsByCategory.SOFT_SKILL,\r\n      offer: allKeywordsByCategory.OFFER,\r\n      team: allKeywordsByCategory.TEAM,\r\n      company: allKeywordsByCategory.COMPANY,\r\n    },\r\n    keywordIndexByJob: payload.keywords.keywordIndexByJob,\r\n    jobMap: payload.jobMap,\r\n    loading: false,\r\n    searchComplete: true\r\n  })\r\n\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.KEYWORD_SEARCH_START:\r\n      console.log(\"keyword search start\")\r\n      return {\r\n        ...state,\r\n        searchComplete: false,\r\n        loading: true\r\n      }\r\n\r\n    case actionTypes.KEYWORD_SEARCH_SUCCESS:\r\n        console.log(\"keyword search complete\")\r\n        return setKeywords(state, action)\r\n        \r\n    case actionTypes.JOB_SEARCH_CACHE_FAIL:\r\n        console.log(\"job cache fail, trying post job description\")\r\n        return {\r\n          ...state,\r\n          cacheError: true,\r\n          searchComplete: false\r\n        }\r\n\r\n    case actionTypes.KEYWORD_SEARCH_FAIL:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          searchComplete: false\r\n        }\r\n  \r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\r\nimport { updateObject } from '../../shared/utility'\r\n\r\nconst initialState = {\r\n  searchComplete: false,\r\n  loading: false,\r\n  searchInput: '',\r\n  jobSearchId: null,\r\n  jobMap: {},\r\n  error: false,\r\n}\r\n\r\nconst setJobMap = (state, payload) => {\r\n  return updateObject(state, {\r\n    jobMap: payload.jobMap,\r\n    jobSearchId: payload.jobSearchId,\r\n    loading: false,\r\n    searchComplete: true\r\n  })\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.JOB_SEARCH_START:\r\n      console.log(\"job search start\")\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n\r\n    case actionTypes.JOB_SEARCH_SUCCESS:\r\n        console.log(\"job search complete\")\r\n        return setJobMap(state, action)\r\n\r\n    case actionTypes.JOB_SEARCH_FAIL:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          searchComplete: true\r\n        }\r\n  \r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\r\nimport { updateObject } from '../../shared/utility'\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  searchComplete: false,\r\n  coOccurredWords: {},\r\n  error: false\r\n}\r\n\r\nconst updateCoCoOccurredWords = (state, payload) => {\r\n  return updateObject(state, {\r\n    coOccurredWords: payload.coOccurredWords,\r\n    loading: false,\r\n    searchComplete: true\r\n  })\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.COOCCURRENCE_SEARCH_START:\r\n      console.log(\"co-occurrence search start\")\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n\r\n    case actionTypes.COOCCURRENCE_SEARCH_SUCCESS:\r\n        console.log(\"co-occurrence search complete\")\r\n        return updateCoCoOccurredWords(state, action)\r\n\r\n    case actionTypes.COOCCURRENCE_SEARCH_FAIL:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          searchComplete: true\r\n        }\r\n  \r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { createStore, compose, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport keywordReducer from './store/reducers/keywordSearch'\r\nimport jobReducer from './store/reducers/jobSearch'\r\nimport coOccurrenceReducer from './store/reducers/coOccurrence'\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst rootReducer = combineReducers({\r\n  keyword: keywordReducer,\r\n  jobDescription: jobReducer,\r\n  coOccurrence: coOccurrenceReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n  applyMiddleware(thunk)\r\n))\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1ylM3\",\"Label\":\"Input_Label__1EX2_\",\"InputElement\":\"Input_InputElement__C5a8f\",\"Invalid\":\"Input_Invalid__3LEeF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__38EeL\",\"load2\":\"Spinner_load2__2N9BO\"};"],"sourceRoot":""}